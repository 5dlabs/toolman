# Default values for toolman
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/5dlabs/toolman
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets:
  - name: ghcr-secret
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1001
  supplementalGroups: [2375]  # Add Docker group for Docker socket access

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 2375  # Add to Docker group for Docker socket access

service:
  type: ClusterIP
  port: 3000
  targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: toolman.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: toolman-tls
  #    hosts:
  #      - toolman.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Temporarily disabled to debug initialization timing
# livenessProbe:
#   httpGet:
#     path: /health
#     port: http
#   initialDelaySeconds: 120  # Give time for all servers to initialize (multiple 45s timeouts)
#   periodSeconds: 30
#   timeoutSeconds: 10
#   failureThreshold: 3

# readinessProbe:
#   httpGet:
#     path: /ready
#     port: http
#   initialDelaySeconds: 90   # Give time for all servers to initialize
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 5

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: config
    configMap:
      name: toolman-config
  - name: tmp
    emptyDir: {}
  - name: docker-sock-dir
    emptyDir: {}
  - name: docker-data
    emptyDir: {}
  - name: home-mcp-pvc
    persistentVolumeClaim:
      claimName: home-mcp-data

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: config
    mountPath: /config
    readOnly: true
  - name: tmp
    mountPath: /tmp
  - name: data
    mountPath: /data
  - name: home-mcp-pvc
    mountPath: /home/mcp
  - name: docker-sock-dir
    mountPath: /var/run

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  - name: PORT
    value: "3000"
  - name: PROJECT_DIR
    value: "/config"
  - name: RUST_LOG
    value: "info"

# Configuration for Toolman
config:
  servers:
    brave-search:
      name: "Brave Search"
      description: "Web search using Brave Search API"
      transport: "stdio"
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-brave-search"]
      workingDirectory: "project_root"
      secretRef:
        name: "toolman-brave-search-secrets"
        keys:
          - "BRAVE_API_KEY"

    memory:
      name: "Memory"
      description: "Persistent memory and knowledge graph for long-term information retention"
      transport: "stdio"
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-memory"]
      workingDirectory: "project_root"
      env:
        MEMORY_FILE_PATH: "/home/mcp/memory.json"

    terraform:
      name: "Terraform"
      description: "Terraform Registry API integration"
      transport: "stdio"
      command: "docker"
      args: ["run", "-i", "--rm", "hashicorp/terraform-mcp-server"]
      workingDirectory: "project_root"

    kubernetes:
      name: "Kubernetes"
      description: "Kubernetes cluster management and Helm operations"
      transport: "sse"
      url: "http://k8s-mcp-k8s-mcp-server.mcp.svc.cluster.local:8080/sse"
      workingDirectory: "project_root"
      # Note: Uses k8s-mcp-server SSE service endpoint
    solana:
      name: "Solana"
      description: "Solana blockchain development tools"
      transport: "http"
      url: "https://mcp.solana.com/mcp"
      workingDirectory: "project_root"

    rustdocs:
      name: "Rust Docs"
      description: "Rust documentation MCP server"
      transport: "sse"
      url: "http://rustdocs-mcp-rust-docs-mcp-server.mcp.svc.cluster.local:3000/sse"
      workingDirectory: "project_root"

    reddit:
      name: "Reddit"
      description: "Reddit content fetching and analysis via uvx"
      transport: "stdio"
      command: "uvx"
      args: ["--from", "git+https://github.com/adhikasp/mcp-reddit.git", "mcp-reddit"]
      workingDirectory: "project_root"
      secretRef:
        name: "toolman-reddit-secrets"
        keys:
          - "REDDIT_CLIENT_ID"
          - "REDDIT_CLIENT_SECRET"
          - "REDDIT_USERNAME"
          - "REDDIT_PASSWORD"

# Local tools configuration (client-side tools available in agent containers)
localTools:
  servers:
    filesystem:
      name: "Filesystem"
      description: "File system operations for reading, writing, and managing files"
      transport: "stdio"
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]
      workingDirectory: "/tmp"

# Persistence for temporary files and caches
persistence:
  enabled: true
  storageClass: "local-path"
  accessMode: ReadWriteOnce
  size: 1Gi
  annotations: {}

# Network policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s