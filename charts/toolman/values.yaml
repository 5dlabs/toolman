# Default values for toolman
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/5dlabs/toolman
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets:
  - name: ghcr-secret
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001

service:
  type: ClusterIP
  port: 3000
  targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: toolman.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: toolman-tls
  #    hosts:
  #      - toolman.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: config
    configMap:
      name: toolman-config
  - name: tmp
    emptyDir: {}
  - name: npm-cache
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
      type: Socket

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: config
    mountPath: /config
    readOnly: true
  - name: tmp
    mountPath: /tmp
  - name: npm-cache
    mountPath: /home/mcp/.npm
  - name: docker-sock
    mountPath: /var/run/docker.sock

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  - name: PORT
    value: "3000"
  - name: PROJECT_DIR
    value: "/config"
  - name: RUST_LOG
    value: "info"

# Configuration for Toolman
config:
  servers:
    brave-search:
      name: "Brave Search"
      description: "Web search using Brave Search API"
      transport: "stdio"
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-brave-search"]
      enabled: true
      alwaysActive: false
      autoStart: true
      workingDirectory: "project_root"
      executionContext: "remote"
      secretRef:
        name: "toolman-brave-search-secrets"
        keys:
          - "BRAVE_API_KEY"
    
    terraform:
      name: "Terraform"
      description: "Terraform Registry API integration"
      transport: "stdio"
      command: "docker"
      args: ["run", "-i", "--rm", "hashicorp/terraform-mcp-server"]
      enabled: true
      alwaysActive: false
      autoStart: true
      workingDirectory: "project_root"
      executionContext: "remote"
    
    kubernetes:
      name: "Kubernetes"
      description: "Kubernetes cluster management and Helm operations"
      transport: "stdio"
      command: "docker"
      args: [
        "run", "--rm", "-i",
        "-v", "/tmp/kubeconfig:/home/appuser/.kube/config:ro",
        "-e", "SERVER_MODE=stdio",
        "ginnux/k8s-mcp-server:latest"
      ]
      enabled: true
      alwaysActive: false
      autoStart: true
      workingDirectory: "project_root"
      executionContext: "remote"
      secretRef:
        name: "toolman-kubernetes-secrets"
        keys:
          - "KUBECONFIG"
      # Note: Uses published Docker image ginnux/k8s-mcp-server
    solana:
      name: "Solana"
      description: "Solana blockchain development tools"
      transport: "http"
      url: "https://mcp.solana.com/mcp"
      enabled: true
      alwaysActive: false
      autoStart: true
      workingDirectory: "project_root"
      executionContext: "remote"
    
    rustdocs:
      name: "Rust Docs"
      description: "Rust documentation MCP server"
      transport: "http"
      url: "http://rustdocs-mcp-rust-docs-mcp-server.mcp.svc.cluster.local:3000/sse"
      enabled: true
      alwaysActive: false
      autoStart: true
      workingDirectory: "project_root"
      executionContext: "remote"
    

# Persistence for temporary files and caches
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi
  annotations: {}

# Network policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s