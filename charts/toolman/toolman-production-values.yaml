# Production values for Toolman Helm chart
# Optimized for high availability, security, and performance

# High Availability Configuration
replicaCount: 3

image:
  repository: ghcr.io/5dlabs/toolman
  tag: "main-4685f6f"  # Use specific version, not latest
  pullPolicy: IfNotPresent  # Save bandwidth since we're using specific tag

imagePullSecrets:
  - name: ghcr-secret

# Pod Security Context - maintains existing UID/GID
podSecurityContext:
  fsGroup: 1001
  supplementalGroups: [2375]  # Docker group for socket access

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 2375

# Production Resource Allocation
resources:
  requests:
    cpu: 500m      # Increased from 100m for better performance
    memory: 512Mi  # Increased from 128Mi for stability
  limits:
    cpu: 2000m     # Allow bursting up to 2 cores
    memory: 2Gi    # Prevent OOM kills

# Enable Health Checks for Production
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 120  # Allow time for all servers to initialize
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 90
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5

# High Availability with Pod Anti-Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - toolman
        topologyKey: kubernetes.io/hostname

# Pod Disruption Budget for maintenance
podDisruptionBudget:
  enabled: true
  minAvailable: 2  # Always keep at least 2 pods running

# Horizontal Pod Autoscaling (optional)
autoscaling:
  enabled: false  # Enable if needed
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Persistence configuration
persistence:
  enabled: true
  storageClass: "local-path"  # Use your production storage class
  accessMode: ReadWriteOnce
  size: 10Gi  # Increased from 1Gi for production
  annotations: {}

# Environment variables for production
env:
  - name: RUST_LOG
    value: "info"  # Use info level for production, not debug
  - name: PORT
    value: "3000"
  - name: PROJECT_DIR
    value: "/data"

# Network Policy (enable for production security)
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: mcp  # Allow traffic from MCP namespace
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - namespaceSelector:
            matchLabels:
              name: orchestrator  # Allow traffic from orchestrator namespace
      ports:
        - protocol: TCP
          port: 3000

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Docker-in-Docker sidecar resources (adjusted for production)
# Note: These would need to be added to the deployment template
# Currently the DinD container has hardcoded resources in the template