name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: toolman
            http_binary_name: toolman-http
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: toolman
            http_binary_name: toolman-http
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: toolman
            http_binary_name: toolman-http
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
          cargo build --release --bin toolman-http --target ${{ matrix.target }}
      
      - name: Package
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe" "dist/"
            cp "target/${{ matrix.target }}/release/${{ matrix.http_binary_name }}.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "dist/"
            cp "target/${{ matrix.target }}/release/${{ matrix.http_binary_name }}" "dist/"
          fi
          
          # Copy configuration files
          cp servers-config.json dist/servers-config.example.json
          cp .mcp-bridge-proxy-config.json dist/mcp-bridge-proxy-config.example.json
          
          # Create archive
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../toolman-${{ matrix.target }}.zip *
          else
            tar czf ../toolman-${{ matrix.target }}.tar.gz *
          fi
          cd ..
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: toolman-${{ matrix.target }}
          path: toolman-${{ matrix.target }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            toolman-*/toolman-*.tar.gz
            toolman-*/toolman-*.zip
          body: |
            # Toolman (MCP Bridge Proxy) Release
            
            ## What's New
            - Multi-project support with per-project tool configuration
            - HTTP server for centralized tool management
            - Support for 25+ MCP servers with 278+ tools
            - Dynamic tool enable/disable at runtime
            - Persistent configuration management
            
            ## Installation
            
            1. Download the appropriate binary for your platform
            2. Extract the archive
            3. Copy `servers-config.example.json` to `servers-config.json` and customize
            4. Run `toolman-http` to start the HTTP server
            5. Configure your IDE to use the stdio wrapper
            
            See README for detailed setup instructions.