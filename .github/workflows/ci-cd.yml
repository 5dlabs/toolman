name: Unified CI/CD

on:
  push:
    branches: [main, 'fix/**', 'feature/**']
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 5dlabs/toolman
  RUST_STABLE_VERSION: stable

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Change detection job
  changes:
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs['server'] }}
      binaries: ${{ steps.filter.outputs['binaries'] }}
      docker: ${{ steps.filter.outputs['docker'] }}
      helm: ${{ steps.filter.outputs['helm'] }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            server:
              - 'src/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
            binaries:
              - 'src/bin/**'
            docker:
              - 'Dockerfile'
              - '.dockerignore'
            helm:
              - 'charts/**'

  # Version determination
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-release: ${{ steps.version.outputs.is-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            # Use commit SHA for non-release builds
            VERSION="main-$(git rev-parse --short HEAD)"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

  # Parallel linting and testing
  lint-rust:
    needs: changes
    if: >-
      always() && (needs.changes.outputs.server == 'true' ||
      needs.changes.outputs.binaries == 'true' ||
      github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      format-needed: ${{ steps.format-check.outputs['format-needed'] }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-toolman"
          cache-targets: true

      - name: Check formatting
        id: format-check
        run: |
          if ! cargo fmt --all -- --check; then
            echo "format-needed=true" >> $GITHUB_OUTPUT
            echo "‚ùå Code formatting issues detected"
            echo "FORMATTING_FAILED=true" >> $GITHUB_ENV
          else
            echo "format-needed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Code formatting is correct"
            echo "FORMATTING_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Fail job if formatting issues detected and not on push event
        if: steps.format-check.outputs['format-needed'] == 'true' && github.event_name != 'push'
        run: |
          echo "‚ùå Formatting issues detected and auto-format is not available (not a push event)"
          exit 1

      - name: Run Clippy
        if: steps.format-check.outputs['format-needed'] == 'false' || github.event_name == 'push'
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Auto-format job that runs when formatting fails
  auto-format:
    needs: [changes, lint-rust]
    if: always() && needs.lint-rust.outputs['format-needed'] == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Auto-format Rust code
        run: |
          echo "üîß Auto-formatting Rust code..."
          cargo fmt --all

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "No changes after formatting"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected after formatting"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs['has-changes'] == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "üîß Auto-format Rust code

          This commit was automatically generated by the CI/CD pipeline
          to fix formatting issues detected by cargo fmt.

          Changes made:
          - Applied cargo fmt --all to fix formatting

          [skip ci]"
          git push

  # Re-run lint after auto-format (only if auto-format ran)
  lint-rust-retry:
    needs: [changes, auto-format]
    if: always() && needs.auto-format.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-toolman"
          cache-targets: true

      - name: Verify formatting is now correct
        run: |
          echo "üîç Verifying formatting after auto-format..."
          cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-rust:
    needs: changes
    if: always() && (needs.changes.outputs.server == 'true' || needs.changes.outputs.binaries == 'true' || github.event_name == 'push')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-toolman"
          cache-targets: true

      - name: Run tests
        run: cargo test --all-features --all-targets

  # Security scanning (non-blocking)
  security-scan:
    needs: changes
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      # Cache Trivy DB
      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          cache-dir: ~/.cache/trivy

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      # Cache cargo-audit binary
      - name: Cache cargo-audit
        uses: actions/cache@v4
        id: cargo-audit-cache
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}-0.21.2

      - name: Install cargo-audit
        if: steps.cargo-audit-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-audit --version 0.21.2

      - name: Rust security audit
        run: cargo audit || true

  # Build binaries
  build-binaries:
    needs: [version, changes]
    if: always() && !cancelled() && (needs.changes.outputs.server == 'true' || needs.changes.outputs.binaries == 'true' || github.event_name == 'push')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: toolman-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: toolman-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: toolman-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: toolman-windows-x86_64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-toolman"
          cache-targets: true

      - name: Setup cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          echo "üîß Setting up cross-compilation for ${{ matrix.target }}..."
          rustup target add ${{ matrix.target }}

      - name: Build binaries
        run: |
          echo "üèóÔ∏è Building for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }} --bin toolman
          cargo build --release --target ${{ matrix.target }} --bin toolman-http

      - name: Create binary archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/toolman dist/
          cp target/${{ matrix.target }}/release/toolman-http dist/
          cd dist
          tar czf ../toolman-${{ matrix.target }}.tar.gz *
          cd ..

      - name: Create binary archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item "target\${{ matrix.target }}\release\toolman.exe" "dist\"
          Copy-Item "target\${{ matrix.target }}\release\toolman-http.exe" "dist\"
          Set-Location dist
          tar czf ..\toolman-${{ matrix.target }}.tar.gz *
          Set-Location ..

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: toolman-${{ matrix.target }}.tar.gz

  # Build Docker images
  build-docker:
    needs: [version, changes]
    if: always() && !cancelled() && (needs.changes.outputs.docker == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Test Helm chart
  test-helm:
    needs: changes
    if: always() && (needs.changes.outputs.helm == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.0'

      - name: Lint Helm chart
        run: |
          helm lint ./charts/mcp-proxy

      - name: Test Helm chart rendering
        run: |
          # Test with default values
          helm template toolman ./charts/mcp-proxy --debug > /tmp/default.yaml
          echo "‚úÖ Default values template rendered successfully"

          # Test with development values
          helm template toolman ./charts/mcp-proxy \
            --set image.tag=test-version > /tmp/custom.yaml
          echo "‚úÖ Custom values template rendered successfully"

      - name: Create test cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: helm-test
          kubectl_version: v1.30.0
          wait: 120s

      - name: Test Helm chart deployment
        run: |
          echo "üöÄ Testing Helm chart deployment..."

          # Wait for cluster to be fully ready
          kubectl wait --for=condition=ready node --all --timeout=300s

          # Install with test values and longer timeout
          helm install test-toolman ./charts/mcp-proxy \
            --set image.repository=nginx \
            --set image.tag=latest \
            --wait --timeout=300s

          # Verify deployment
          kubectl get pods -l app.kubernetes.io/name=mcp-proxy
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mcp-proxy --timeout=180s

          # Cleanup
          helm uninstall test-toolman --timeout=120s

          echo "‚úÖ Helm chart deployment test passed"

  # Deployment summary
  deployment-summary:
    needs: [version, build-binaries, build-docker, security-scan, test-helm]
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "üéâ Build and deployment summary for ${{ needs.version.outputs.version }}"
          echo ""
          echo "## Artifacts Built:"
          echo "- ‚úÖ Binary artifacts: ${{ needs.build-binaries.result }}"
          echo "- ‚úÖ Docker image: ${{ needs.build-docker.result }}"
          echo "- üì¶ Helm chart: ${{ needs.test-helm.result }}"
          echo ""
          echo "## Quality Checks:"
          echo "- üìä Security scan: ${{ needs.security-scan.result }}"
          echo "- üéØ Helm chart tests: ${{ needs.test-helm.result }}"
          echo ""
          echo "## Container Image:"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}"